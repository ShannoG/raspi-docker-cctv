# Default

log_format tls_log '$remote_addr $remote_user [$time_local] "$request" $http_host '
'$status $upstream_status $body_bytes_sent "$http_referer" '
'"$http_user_agent" $upstream_addr [$request_time/$upstream_response_time] '
'[SSL]: $ssl_protocol $ssl_cipher SSL_CLIENT{Verify:$ssl_client_verify, Serial:$ssl_client_serial, SDN:$ssl_client_s_dn, IDN:$ssl_client_i_dn}';


server {
  listen 443 ssl default_server;
  listen [::]:443 ssl default_server;
  server_name   "";

  ssl_ciphers aNULL;
 # ssl_certificate /etc/ssl/certs/nginx/fullchain.pem;
 # ssl_certificate_key /etc/ssl/certs/nginx/privkey.pem;
  ssl_certificate /etc/letsencrypt/live/updateme/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/updateme/privkey.pem;

  return 444;
}
include /etc/nginx/conf.d/*.conf.d;


server {
listen 8080 default_server;
listen 8081 ssl http2;
listen 443 ssl http2;
server_name updateme;

# Path for SSL config/key/certificate
#ssl_certificate /etc/ssl/certs/nginx/server.crt;
#ssl_certificate_key /etc/ssl/certs/nginx/server.key;
ssl_certificate /etc/letsencrypt/live/updateme/fullchain.pem;
ssl_certificate_key /etc/letsencrypt/live/update/privkey.pem;

#Configurtion for client validation
ssl_client_certificate /etc/ssl/certs/nginx/ca2.crt;
ssl_verify_client optional;
#ssl_verify_client on;

include /etc/nginx/includes/ssl.conf;

root /var/www/html;


charset UTF-8;

error_page 404 /backend-not-found.html;
location = /backend-not-found.html {
allow all;
}

location ^~ /clientcerts/ {
alias /var/www/html/clientcerts/;
autoindex on;
allow updateme; #determine trust values for clientcerts
deny all;
}

location ^~ /mycert {
        if ($ssl_client_verify != "SUCCESS") {
            return 403;}

  allow updateme; #determine trust values for clientcerts
  try_files /var/www/html/clientcerts/$ssl_client_s_dn /var/www/html/clientcerts/updateme.crt =408;
  #add_header Content-Type text/plain;
  #return 200 $ssl_client_s_dn_legacy;
}

location /frigate/ {
        if ($ssl_client_verify != "SUCCESS") {
            return 403;}
  proxy_set_header Host $host;
  proxy_set_header X-Ingress-Path "/frigate";
  proxy_set_header X-Forwarded-Scheme $scheme;
  proxy_set_header X-Forwarded-Proto $scheme;
  proxy_set_header X-Forwarded-For $remote_addr;
  proxy_pass http://localhost:5000/; #updateme
  proxy_http_version 1.1;
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header Connection "upgrade";
}

location /in/ {
        if ($ssl_client_verify != "SUCCESS") {
            return 403;}
  rewrite /in/(.*) /$1  break;
  proxy_set_header Host $host;
  proxy_set_header X-Forwarded-Scheme $scheme;
  proxy_set_header X-Forwarded-Proto $scheme;
  proxy_set_header X-Forwarded-For $remote_addr;
  proxy_pass http://localhost:8082; #updateme
  proxy_http_version 1.1;
}

location /client/ {
        if ($ssl_client_verify != "SUCCESS") {
            return 403;}
  proxy_set_header Host $host;
  proxy_set_header X-Forwarded-Scheme $scheme;
  proxy_set_header X-Forwarded-Proto $scheme;
  proxy_set_header X-Forwarded-For $remote_addr;
  proxy_pass http://localhost:8082; #updateme
  proxy_http_version 1.1;
}

location / {
        if ($ssl_client_verify != "SUCCESS") {
            return 403;}
  proxy_pass http://hass:8123/; #updateme
  rewrite /hass/(.*) /$1  break;
  proxy_set_header Host $host;
  proxy_http_version 1.1;
  proxy_set_header X-Forwarded-For $remote_addr;
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header Connection "upgrade";
}

#access_log off;
#log_not_found off;
error_log /var/log/nginx/error.log error;
access_log /var/log/nginx/access.log tls_log; 
}
